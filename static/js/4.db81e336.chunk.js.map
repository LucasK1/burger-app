{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","valid","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","loading","errorMessage","error","style","fontSize","fontWeight","color","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/4.db81e336.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if  (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3-qOD\",\"Label\":\"Input_Label__2C_Y5\",\"InputElement\":\"Input_InputElement__2Q9W1\",\"Invalid\":\"Input_Invalid__21LBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__219I_\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nimport classes from './Auth.module.css';\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your Email',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignUp: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => {\r\n      return (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n        />\r\n      );\r\n    });\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = this.props.error ? (\r\n      <p style={{ fontSize: '2em', fontWeight: 'bold', color: 'red' }}>\r\n        {this.props.error.message}\r\n      </p>\r\n    ) : null;\r\n\r\n    let authRedirect = this.props.isAuthenticated ? (\r\n      <Redirect to={this.props.authRedirectPath} />\r\n    ) : null;\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        <label style={{ fontWeight: 'bold' }}>\r\n          {this.state.isSignUp ? 'SIGN UP' : 'SIGN IN'}\r\n        </label>\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    error: state.auth.error,\r\n    loading: state.auth.loading,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}