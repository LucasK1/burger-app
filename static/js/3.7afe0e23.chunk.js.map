{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","email","isEmail","street","postalCode","minLength","maxLength","isNumeric","country","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","orderData","price","totalPrice","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","this","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.7afe0e23.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if  (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3-qOD\",\"Label\":\"Input_Label__2C_Y5\",\"InputElement\":\"Input_InputElement__2Q9W1\",\"Invalid\":\"Input_Invalid__21LBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1nm6e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1D7aU\",\"Input\":\"ContactData_Input__eppNn\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes good</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler-classBased';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Name',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Email',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Street',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      postalCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Postal Code',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Country',\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            { value: 'fastest', displayValue: 'Fastest' },\r\n            { value: 'cheapest', displayValue: 'Cheapest' },\r\n          ],\r\n        },\r\n        value: 'cheapest',\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      orderData: formData,\r\n      price: this.props.totalPrice,\r\n      userId: this.props.userId,\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n\r\n    let formIsValid = true;\r\n\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => {\r\n          return (\r\n            <Input\r\n              key={formElement.id}\r\n              elementType={formElement.config.elementType}\r\n              elementConfig={formElement.config.elementConfig}\r\n              value={formElement.config.value}\r\n              invalid={!formElement.config.valid}\r\n              shouldValidate={formElement.config.validation}\r\n              touched={formElement.config.touched}\r\n              changed={(event) =>\r\n                this.inputChangedHandler(event, formElement.id)\r\n              }\r\n            />\r\n          );\r\n        })}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your contact data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    totalPrice: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(actions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n  // componentWillMount() {\r\n  //   const query = new URLSearchParams(this.props.location.search);\r\n  //   const ingredients = {};\r\n  //   let price = 0;\r\n  //   for (let param of query.entries()) {\r\n  //     if (param[0] === 'price') {\r\n  //       price = param[1];\r\n  //     } else {\r\n  //     ingredients[param[0]] = +param[1];\r\n  //     }\r\n  //   }\r\n  //   this.setState({ ingredients: ingredients, totalPrice: price });\r\n  // }\r\n\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace('/checkout/contact-data');\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\" />;\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? (\r\n        <Redirect to=\"/\" />\r\n      ) : null;\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route\r\n            path={this.props.match.path + '/contact-data'}\r\n            component={ContactData}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}